-- @nsURI SimplePDL=http://simplepdl
-- @nsURI PetriNet=http://petrinet
module SimplePDL2PetriNet;
create OUT: petriNet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petriNet!PetriNet (name <- p.name)
}

-- Traduire une Ressource en une place d'un réseau de Petri
rule Ressource2Petrinet {
	from ress : simplepdl!Ressource
	to
		p_free: petriNet!Place(
			name <- ress.name + '_free',
			jeton <- ress.stock,
			net <- ress.getProcess())
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petriNet!Place(
				name <- wd.name + '_ready',
				jeton <- 1,
				net <- wd.getProcess()),
		p_started: petriNet!Place(
				name <- wd.name + '_started',
				jeton <- 0,
				net <- wd.getProcess()),
		p_running: petriNet!Place(
				name <- wd.name + '_running',
				jeton <- 0,
				net <- wd.getProcess()),
		p_finished : petriNet!Place(
				name <- wd.name + '_finished',
				jeton <- 0,
				net <- wd.getProcess()),
				
		-- TRANSITIONS d'une WorkDefinition
		t_start: petriNet!Transition(
				name <- wd.name + '_start',
				net <- wd.getProcess()),
		t_finish: petriNet!Transition(
				name <- wd.name + '_finish',
				net <- wd.getProcess()),
				
		-- ARCS d'une WorkDefinition
		a_ready_to_start: petriNet!Arc(
				poids <- 1,
				place <- p_ready,
				transition <- t_start,
				sens <- #placeToTransition,
				isReadArc <- false,
				net <- wd.getProcess()),
		a_start_to_started: petriNet!Arc(
				poids <- 1,
				place <- p_started,
				transition <- t_start,
				sens <- #transitionToPlace,
				isReadArc <- false,
				net <- wd.getProcess()),
		a_start_to_running: petriNet!Arc(
				poids <- 1,
				place <- p_running,
				transition <- t_start,
				sens <- #transitionToPlace,
				isReadArc <- false,
				net <- wd.getProcess()),
		a_running_to_finish: petriNet!Arc(
				poids <- 1,
				place <- p_running,
				transition <- t_finish,
				sens <- #placeToTransition,
				isReadArc <- false,
				net <- wd.getProcess()),
		a_finish_to_finished: petriNet!Arc(
				poids <- 1,
				place <- p_finished,
				transition <- t_finish,
				sens <- #transitionToPlace,
				isReadArc <- false,
				net <- wd.getProcess())
}

-- Traduire une WorkSequence en un arc sur le réseau de Petri
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to 
		a_link: petriNet!Arc(
			poids <- 1,
			place <- thisModule.resolveTemp(ws.predecessor,if (ws.linkType = #startToStart or ws.linkType = #startToFinish) then 'p_started' else 'p_finished' endif),
			transition <- thisModule.resolveTemp(ws.successor,if (ws.linkType = #startToStart or ws.linkType = #finishToStart) then 't_start' else 't_finish' endif),
			sens <- #placeToTransition,
			isReadArc <- true,
			net <- ws.getProcess())
		
}


-- Traduire une AskedRessource en deux arc sur le réseau de Petri
rule AskedRessource2PetriNet {
	from askRess : simplepdl!AskedRessource
	to
		a_give: petriNet!Arc(
			poids <- askRess.quantity,
			place <- thisModule.resolveTemp(askRess.ressource,'p_free'),
			transition <- thisModule.resolveTemp(askRess.workActivity,'t_start'),
			sens <- #placeToTransition,
			-- les arcs des ressources ne sont pas readArc ? Même pour la lecture de la ressource ? Pas de vérification de la présence des ressources (quantité nécessaires ?)?
			isReadArc <- false,
			net <- askRess.workActivity.getProcess()),
		a_return: petriNet!Arc(
			poids <- askRess.quantity,
			place <- thisModule.resolveTemp(askRess.ressource,'p_free'),
			transition <- thisModule.resolveTemp(askRess.workActivity,'t_finish'),
			sens <- #transitionToPlace,
			isReadArc <- false,
			net <- askRess.workActivity.getProcess())
-- le AskedRessource.getProcess() retourne rien (bizarre), donc passage par la WorkDefinition pour accéder au process
}