import 'SimplePDL.ecore'

package simplepdl

	/*
	 * context Process
	 * inv warningSeverity: false
	 * inv withMessage('Explicit message in process ' + self.name + ' (withMessage)'): false
	 * inv errorSeverity: null
	 */

context Process
inv NomsActivites('Les noms de deux activités différentes de ' + self.name + ' sont dentiques.'):
	self.processElements->select(p:ProcessElement | p.oclIsKindOf(WorkDefinition))
						->collect(p:ProcessElement | p.oclAsType(WorkDefinition))
						->forAll(w1, w2 | w1 = w2 or w1.name <> w2.name)

context WorkSequence
inv Reflexivite('Dépendance réflexive entre ' + self.predecessor.name + ' et ' + self.successor.name + '.'):
	self.predecessor <> self.successor

						
context Process
inv validName('Invalid name: ' + self.name+ '.'):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

context WorkDefinition
inv taillNomInv('Le nom de l\'activité ' + self.name + ' comporte moins de deux lettres.'): self.name.size() > 1

context WorkDefinition
inv nomActivite('le nom de l\'activité '+self.name+' n\'est pas bien composé.'): self.name.matches('[A-Za-z_][A-Za-z0-9_]*')


context Ressource
inv stockPositif('La ressource '+self.name+' a un stock négatif.'): self.stock >= 0

context Process
inv NomsRessources('Les noms de deux ressources différentes de ' + self.name + ' sont dentiques.'):
	self.processElements->select(p:ProcessElement | p.oclIsKindOf(Ressource))
						->collect(p:ProcessElement | p.oclAsType(Ressource))
						->forAll(w1, w2 | w1 = w2 or w1.name <> w2.name)
						
context Ressource
inv nomRessource('Le nom de la ressource '+self.name+' n\'est pas bien composé.'):self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

context AskedRessource
inv demandePositif('L\'activité demande une quantité négative.'): self.quantity>=0

endpackage